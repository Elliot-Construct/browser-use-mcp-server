name: Upload Python Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      commit:
        description: "Commit to build from"
        required: true
        default: "main"

permissions:
  contents: read

jobs:
  release-build:
        

    runs-on: ubuntu-latest
    outputs:
      PACKAGE_NAME: ${{ steps.package_name.outputs.PACKAGE_NAME }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract package name
        id: package_name
        run: |
          TAG_NAME=${{ github.ref_name }}
          PACKAGE_NAME=$(echo $TAG_NAME | sed 's/-[0-9].*$//')
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Set up uv and Python
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: "3.13"
          cache-dependency-glob: "pyproject.toml"

      - name: Install python packages
        run: |
          uv sync
      - name: Build a binary wheel and a source tarball
        run: |
          uv build --sdist --wheel --out-dir dist

      - name: Publish build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package_name.outputs.PACKAGE_NAME }}-pypi-dists
          path: "./dist"

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      url: https://pypi.org/project/browser-use-mcp-server/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-pypi-dists.outputs.PACKAGE_NAME}}-pypi-dists
          path: "./dist"

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: "./dist"
  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
    - pypi-publish
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build-pypi-dists.outputs.PACKAGE_NAME}}-pypi-dists
        path: "./dist"
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        "$GITHUB_REF_NAME"
        --repo "$GITHUB_REPOSITORY"
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        ${{ needs.build-pypi-dists.outputs.PACKAGE_NAME}} dist/**
        --repo "$GITHUB_REPOSITORY"
